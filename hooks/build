#!/bin/sh

# ros-dpkg/hooks/build

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly project_dir="$(dirname "${here}")"
readonly whatami="$(basename "${project_dir}").$(basename "${here}").$(basename "${this}")"

log() { echo "${whatami}[$$]: $@" >&2; }
info() { log "INFO: $@"; }
warning() { log "WARNING: $@"; }
error() { log "ERROR: $@"; }

# Print the remote URL for the current branch
#
# $1 : git checkout directory
get_vcs_url() {
    git -C "$1" rev-parse --abbrev-ref --symbolic-full-name @{u} \
        | grep -Eo '^[^/]+' \
        | xargs -I{} git -C "$1" config "remote.{}.url"
}

# Print a sha1 for the current state of the checkout.
#
# When there are uncommitted changes, `git stash create` will make a commit
# object (without storing it) and print it. When there are no uncommitted
# changes, `git stash create` will print an empty string and succeed; in this
# case we want get sha1sum of the HEAD. We attempt to print both, but take only
# the first.
#
# $1 : git checkout directory
get_vcs_ref() {
    (
        git -C "$1" stash create
        git -C "$1" rev-parse HEAD
    ) | head -1
}

# Print the name for the current branch
#
# $1 : git checkout directory
get_source_branch() { git -C "$1" rev-parse --abbrev-ref HEAD; }

# Print the name for docker tag
#
# $1 : git checkout directory
get_docker_tag() { get_source_branch "$1" | sed 's/^master$/latest/'; }

export BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

if ! [ -n "${VCS_REF:-}" ]; then
    export VCS_REF="$(get_vcs_ref "${project_dir}")"
    warning "defaulting VCS_REF: ${VCS_REF}"
fi

if ! [ -n "${VCS_URL:-}" ]; then
    export VCS_URL="$(get_vcs_url "${project_dir}")"
    warning "defaulting VCS_URL: ${VCS_URL}"
fi

if [ -n "${IMAGE_NAME:-}" ]; then
    # from IMAGE_NAME to DOCKER_{REPO,TAG}
    if ! [ -n "${DOCKER_REPO:-}" ]; then
        export DOCKER_REPO="${IMAGE_NAME%:*}"
        warning "defaulting DOCKER_REPO: ${DOCKER_REPO}"
    fi
    if ! [ -n "${DOCKER_TAG:-}" ]; then
        export DOCKER_TAG="${IMAGE_NAME#*:}"
        warning "defaulting DOCKER_TAG: ${DOCKER_TAG}"
    fi
else
    # from DOCKER_{REPO,TAG} to IMAGE_NAME
    if ! [ -n "${DOCKER_REPO:-}" ]; then
        export DOCKER_REPO="$(basename "${project_dir}")"
        warning "defaulting DOCKER_REPO: ${DOCKER_REPO}"
    fi
    if ! [ -n "${DOCKER_TAG:-}" ]; then
        export DOCKER_TAG="${DOCKER_TAG:-$(get_docker_tag "${project_dir}")}"
        warning "defaulting DOCKER_TAG: ${DOCKER_TAG}"
    fi
    export IMAGE_NAME="${IMAGE_NAME:-${DOCKER_REPO}:${DOCKER_TAG}}"
    warning "defaulting IMAGE_NAME: ${IMAGE_NAME}"
fi

env | sort

# https://medium.com/microscaling-systems/labelling-automated-builds-on-docker-hub-f3d073fb8e1
# https://stackoverflow.com/questions/41898503/loop-over-environment-variables-in-posix-sh/41914583#41914583
docker image build \
    $(awk 'END{for(var in ENVIRON){print var}}' </dev/null | sort | xargs -n1 echo "--build-arg") \
    --tag "${IMAGE_NAME}" \
    "${project_dir}"
